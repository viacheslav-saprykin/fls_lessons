/* Підключення шрифтів */
@import url("fonts.css");

/* Скидання стилів */
@import url("reset.css");

/* Основні стилі */
body {
	background-color: #333;
	font-family: Arial, "Helvetica Neue", Helvetica, sans-serif;
	color: #fff;
}
.wrapper {
	min-height: 100%;
	overflow: clip;

	padding: 50px;
}

.block {
	width: 200px;
	height: 200px;
	background-color: #7a956b;
}
.block:not(:last-child) {
	margin-bottom: 50px;
}

/*
CSS – переходи чи CSS – transitions можуть застосовуватися 
всім елементам і навіть до псевдоэлементам. Використовуються 
для пожвавлення нашої верстки. 
Що, у свою чергу, призводить до поліпшення взаємодії з користувачем,
як правило шляхом приємної анімованої реакції на його дії. 
Наприклад – наведення та натискання на кнопку.
Також властивості transition можна використовувати для 
побудови нескладних сценаріїв анімації. Фактично,
CSS – переходи забезпечують зміну значень інших властивостей 
із певною анімацією та сценарієм.
*/

/* 1000ms = 1s */

/*
transition-duration
Визначає проміжок часу, 
протягом якого має здійснюватись перехід. 
Власне - тут ми вказуємо час за яке 
одне значення властивості переходить (анімується)
в інше. Властивість не успадковується.
*/
/* transition-duration: 0.5s;  */
/* transition-duration: 500ms;  */

/*
.block {
	transition-duration: 0.5s; 
}
.block:hover {
	background-color: #77608d;
}
*/

/* Місця вказання transition-duration */
/*
.link {
	color: green;
	transition-duration: 0.2s;
}
.link:hover {
	transition-duration: 0.5s;
	color: yellow;
}
*/

/*
	transition-property
	Містить назву CSS-властивостей,
	до яких буде використано ефект переходу. 
	Значення властивості може містити як одну 
	властивість, так і список властивостей 
	через кому. Властивість не успадковується.
	*/
/* transition-property: all; */

.block {
	/* transition-duration: 0.5s; */
	/* Свій час для кожної властивості */
	/* transition-duration: 0.5s, 2s, 5s; */

	/* transition-property: all; */
	/* Тільки ці властивості */
	/* transition-property: width, background-color; */
	/* 
	visibility: visible;
	opacity: 1;
 	*/
}
/*
.block:hover {
	width: 300px;
	height: 300px;
	background-color: #77608d;
}

.wrapper:hover .block {
	visibility: hidden;
	opacity: 0;
}
*/

/*
	transition-delay
	Затримка виконання переходу. Дозволяє зробити 
	так, щоб зміна якості відбувалася не миттєво,
	а з деякою затримкою. Час затримки переходу 
	вказується у секундах або мілісекундах. 
	Властивість не успадковується.
	*/
/* transition-delay: 0s; */

.block {
	/* transition-duration: 0.5s; */
	/* Створення черговості анімацій (сценарій) */
	/* 
	transition-duration: 0.5s, 0.3s, 1s;
	transition-delay: 0s, 0.5s, 0.8s;
	transition-property: width, height, background-color;
	 */
}
.block:hover {
	/*
	width: 300px;
	height: 300px;
	background-color: #77608d;
	*/
}

/* Приклад */
/*
.list {
}
.list__item {
	transform: translate(-100%, 0px);
	transition-duration: 0.2s;
}

.list__item:nth-child(1) {
	transition-delay: 0s;
}
.list__item:nth-child(2) {
	transition-delay: 0.2s;
}
.list__item:nth-child(3) {
	transition-delay: 0.4s;
}
.list__item:nth-child(4) {
	transition-delay: 0.6s;
}
.list__item:nth-child(5) {
	transition-delay: 0.8s;
}

.list:hover .list__item {
	transition-duration: 0.5s;
	transform: translate(0px, 0px);
}

.list__item:not(:last-child) {
	margin-bottom: 15px;
}
*/

/*
	transition-timing-function
	Задає стиль нашого переходу,
	тобто якийсь сценарій,
	за яким здійсняться анімація.
	*/
/* transition-timing-function: cubic-bezier(0.39, -0.42, 0.47, 1.35); */

.block {
	/* transition-duration: 0.5s; */
	/* transition-timing-function: ease; */
	/* transition-timing-function: cubic-bezier(0.39, -0.42, 0.47, 1.35);*/
	/* transition-timing-function: steps(2, start); */
}
.block:hover {
	/* width: 300px; */
	/* height: 300px; */
	/* background-color: #77608d; */
	/* transform: rotate(-360deg); */
}

/*
	Універсальний запис
	transition

	Порядок запису значень через пробіл:
	transition-property
	transition-duration
	transition-timing-function
	transition-delay
	*/
/* transition: all 0.5s cubic-bezier(0.39, -0.42, 0.47, 1.35) 0s; */

/* Декілька параметрів */
/* transition: width 0.8s ease 0s, height 0.5s ease-in 0.8s, background-color 1s ease 1.5s; */

.block {
	/* transition: all 0.3s; */

	/*
	transition:
		width 0.3s linear 0s,
		height 0.5s ease-in-out 0.3s;
		*/
}
.block:hover {
	/*
	width: 300px;
	height: 300px;
	background-color: #77608d;
	*/
}

/*
.link {
	color: green;
	transition: color 0.3s;
}
.link:hover {
	color: yellow;
}
*/

/* Приклад */

.image {
	display: inline-block;
	position: relative;
	overflow: hidden;
}
.image::before {
	position: absolute;
	width: 100%;
	height: 100%;
	top: 0;
	left: -100%;
	background-color: #000;
	opacity: 0.5;
	content: "";
	transition: left 0.3s;
}

.image img {
	width: 200px;
}

.image:hover::before {
	left: 0;
}
/*
.link {
	color: green;
	transition: color 0.3s;
	overflow: hidden;
}
.link::after {
	content: "";
	width: 0;
	display: block;
	height: 2px;
	left: 50%;
	position: relative;
	margin-top: 2px;
	background-color: green;
	transition: all 0.3s;
}

.link:hover {
	color: yellow;
}
.link:hover::after {
	background-color: yellow;
	width: 100%;
	left: 0;
}
*/

/* ------------------------------------- */

/* CSS animation & @keyframes 

Як і CSS властивість плавних переходів transition,
про яку ми говорили в уроці,
властивість animation покликана зробити нашу верстку динамічнішою,
оживити її для кращої взаємодії з 
користувачем та створення WOW ефекту. 

Але на відміну від CSS переходів,
створення анімації базується на ключових кадрах @keyframes,
які дозволяють автоматично відтворювати та повторювати 
ефекти протягом заданого часу, а також зупиняти 
анімацію за певною подією. 

Іншими словами, використання конструкції animation 
та @keyframes дозволяє нам створювати більш складні сценарії анімацій.

*/

.block-animation {
	position: relative;
	width: 200px;
	height: 200px;
	background-color: #77608d;
}

/* Сценарії @keyframes (ключові кадри) */
/* 
name (ім'я сценарію) не може містити 
пробіли та інші знаки крім дефісу (-) 
*/
@keyframes rotate {
	0% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(360deg);
	}
}

@keyframes run {
	0% {
		left: 0;
	}
	100% {
		left: 100%;
	}
}

/*
	animation-name
	Визначає список анімацій (ключових кадрів),
	що застосовуються до елемента. Можна вказати через кому. 
	Причому пріоритет останній запис.
	*/
/* animation-name: rotate; */

.block-animation {
	animation-name: rotate;
}

/*
	animation-duration
	Відповідає за тривалість анімації.
	*/
/* animation-duration: 1s; */

.block-animation {
	animation-duration: 1s;
}

/*
	animation-timing-function
	Встановлює сценарій розвитку анімації між ключовими кадрами.
	*/
/* animation-timing-function: ease; */

.block-animation {
	animation-timing-function: ease;
}

/*
	animation-iteration-count
	Відповідає за повтор відтворення ключових кадрів.
	*/
/* animation-iteration-count: 1; */

.block-animation {
	/* animation-iteration-count: 5; */
	/* animation-iteration-count: infinite; */
}

/*
	animation-direction
	Визначає напрямок та тип відтворення ключових кадрів.
	normal - за замовченням
	reverse -  в зворотньому напрямку
	alternate - кожна парна ітерація буде відбуватись у зворотньому напрямку
	alternate-reverse - кожна непарна ітерація буде відбуватись у зворотньому напрямку
*/

.block-animation {
	/* animation-iteration-count: infinite; */
	/* animation-direction: alternate; */
}

/*
	animation-play-state
	Дозволяє запускати або зупиняти анімацію за подією.
	*/
/* animation-play-state: running; */

.block-animation {
	/* animation-iteration-count: infinite; */
	/*
	width: 10px;
	height: 10px;
	animation-name: run;
	animation-duration: 0.2s;
	animation-iteration-count: infinite;
	animation-direction: alternate;
	animation-timing-function: linear;
	*/
}

.block-animation:hover {
	/* animation-play-state: paused; */
}

/*
	animation-delay
	Відповідає за затримку перед відтворенням.
	*/
/* animation-delay: 0s; */

.block-animation {
	/* animation-delay: 2s; */
}

/*
	animation-fill-mode
	Визначає,
	які значення анімованих css властивостей 
	застосовуються до об'єкта після завершення анімації.
	*/
/* animation-fill-mode: none; */

.block-animation {
	/* animation-name: run; */
	/* Після закінчення анімації залишається в кінцевому положенні */
	/* animation-fill-mode: forwards; */
}

/*
	Універсальний запис
	animation

	Порядок запису властивостей:
	animation-name
	animation-duration
	animation-timing-function
	animation-iteration-count
	animation-direction
	animation-play-state
	animation-delay
	animation-fill-mode

	*/
/* animation: rotate 1s linear 1 normal running 0s forwards; */

/* Декілька анімацій */
/* animation: rotate 1s linear 1 normal running 0s forwards, rotate-2 1s ease infinite alternate running 1s forwards; */

.block-animation {
	/* animation: rotate 10s linear infinite; */
}

/* Приклади */
/*
.newton {
	width: 300px;
	height: 300px;
	margin: 0 auto;
	border-top: 10px solid yellow;
	position: relative;
}
.newton:hover .newton__item {
	animation-play-state: paused;
}

.newton__item {
	position: absolute;
	top: -2px;
	height: 100%;
	width: 33.333%;
	transform-origin: top;
}
.newton__item::before {
	content: "";
	width: 5px;
	margin-left: -2.5px;
	position: absolute;
	background-color: #fff;
	height: 100%;
	left: 50%;
}
.newton__item::after {
	width: 100px;
	height: 100px;
	content: "";
	background-color: green;
	border-radius: 50%;
	position: absolute;
	bottom: 0;
}
.newton__item:nth-child(1) {
	left: 0;
	animation: left-item 1s infinite ease-in alternate;
}
.newton__item:nth-child(2) {
	left: 33.33%;
}
.newton__item:nth-child(3) {
	animation: right-item 1s infinite ease-out alternate;
	right: 0;
}

@keyframes left-item {
	0% {
		transform: rotate(45deg);
	}
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(0deg);
	}
}
@keyframes right-item {
	0% {
		transform: rotate(0deg);
	}
	50% {
		transform: rotate(0deg);
	}
	100% {
		transform: rotate(-45deg);
	}
}
*/

.button {
	cursor: pointer;
	background-color: green;
	display: inline-block;
	padding: 15px;
	border-radius: 15px;
	text-transform: uppercase;
	letter-spacing: 3px;
	box-shadow: 0px 5px 0px #000;
	position: relative;
	top: 0;
	transition: all 0.2s;
}
.button:hover {
	top: 2px;
	box-shadow: 0px 3px 0px #000;
}
.button:active {
	top: 5px;
	box-shadow:
		0px 0px 0px #000,
		inset 0px 0px 5px 0px #333;
}
